# This file was automatically generated by converter.py.
# Think long and hard before attempting to modify it.

import math
from components.helpers import *
from components._patches import *


class IMarginalEmissionState(Parameters):
    emission = IParameter1Dimensional('emission', ['Timestep'], 'Double', None)
    modemission = IVariable1Dimensional(
        'modemission',
        ['Timestep'],
        'Double',
        None)
    emissionperiod = ScalarVariable('emissionperiod', 'Timestep', None)
    impulselength = ScalarVariable('impulselength', 'int', None)

    options = [emission, modemission, emissionperiod, impulselength]


class MarginalEmissionComponent(Behaviors):
    state_class = IMarginalEmissionState

    def run(self, state, clock, dimensions):

        t = (clock.Current)
        s = (state)

        if ((t >= s.emissionperiod) and (t < (s.emissionperiod + s.impulselength))):

            s.modemission[t] = (s.emission[t] + 1)

        else:
            s.modemission[t] = (s.emission[t])


behavior_classes = [MarginalEmissionComponent]
