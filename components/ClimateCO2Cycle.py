# This file was automatically generated by converter.py on
# 2013-11-05 21:16:09.945047. Think long and hard before
# attempting to modify it.

import math
from components.helpers import *
from components._patches import *


class IClimateCO2CycleState(Parameters):
    mco2 = IParameter1Dimensional(
        'mco2', ['Timestep'], 'double', 'Anthropogenic CO2 emissions in Mt of C')
    TerrestrialCO2 = IVariable1Dimensional(
        'TerrestrialCO2', ['Timestep'], 'double', 'Terrestrial biosphere CO2 emissions in Mt of C')
    globc = IVariable1Dimensional(
        'globc', ['Timestep'], 'double', 'Net CO2 emissions in Mt of C')
    cbox1 = IVariable1Dimensional(
        'cbox1', ['Timestep'], 'double', 'Carbon box 1')
    cbox2 = IVariable1Dimensional(
        'cbox2', ['Timestep'], 'double', 'Carbon box 2')
    cbox3 = IVariable1Dimensional(
        'cbox3', ['Timestep'], 'double', 'Carbon box 3')
    cbox4 = IVariable1Dimensional(
        'cbox4', ['Timestep'], 'double', 'Carbon box 4')
    cbox5 = IVariable1Dimensional(
        'cbox5', ['Timestep'], 'double', 'Carbon box 5')
    acco2 = IVariable1Dimensional(
        'acco2', ['Timestep'], 'double', 'Atmospheric CO2 concentration')
    TerrCO2Stock = IVariable1Dimensional(
        'TerrCO2Stock', ['Timestep'], 'double', 'Stock of CO2 in the terrestrial biosphere')
    temp = IParameter1Dimensional(
        'temp', ['Timestep'], 'double', 'Temperature')
    co2decay1 = ScalarVariable('co2decay1', 'double', 'Carbon decay in box 1')
    co2decay2 = ScalarVariable('co2decay2', 'double', 'Carbon decay in box 2')
    co2decay3 = ScalarVariable('co2decay3', 'double', 'Carbon decay in box 3')
    co2decay4 = ScalarVariable('co2decay4', 'double', 'Carbon decay in box 4')
    co2decay5 = ScalarVariable('co2decay5', 'double', 'Carbon decay in box 5')
    lifeco1 = ScalarVariable('lifeco1', 'double', 'Carbon decay in box 1')
    lifeco2 = ScalarVariable('lifeco2', 'double', 'Carbon decay in box 2')
    lifeco3 = ScalarVariable('lifeco3', 'double', 'Carbon decay in box 3')
    lifeco4 = ScalarVariable('lifeco4', 'double', 'Carbon decay in box 4')
    lifeco5 = ScalarVariable('lifeco5', 'double', 'Carbon decay in box 5')
    co2frac1 = ScalarVariable(
        'co2frac1', 'double', 'Fraction of carbon emission in box 1')
    co2frac2 = ScalarVariable(
        'co2frac2', 'double', 'Fraction of carbon emission in box 2')
    co2frac3 = ScalarVariable(
        'co2frac3', 'double', 'Fraction of carbon emission in box 3')
    co2frac4 = ScalarVariable(
        'co2frac4', 'double', 'Fraction of carbon emission in box 4')
    co2frac5 = ScalarVariable(
        'co2frac5', 'double', 'Fraction of carbon emission in box 5')
    TerrCO2Sens = ScalarVariable('TerrCO2Sens', 'double', None)
    TerrCO2Stock0 = ScalarVariable('TerrCO2Stock0', 'double', None)
    tempIn2010 = ScalarVariable('tempIn2010', 'double', None)

    options = [
        mco2, TerrestrialCO2, globc, cbox1, cbox2, cbox3, cbox4, cbox5, acco2, TerrCO2Stock, temp, co2decay1, co2decay2, co2decay3, co2decay4,
        co2decay5, lifeco1, lifeco2, lifeco3, lifeco4, lifeco5, co2frac1, co2frac2, co2frac3, co2frac4, co2frac5, TerrCO2Sens, TerrCO2Stock0, tempIn2010]


class ClimateCO2CycleComponent(Behaviors):
    state_class = IClimateCO2CycleState

    def run(self, state, clock, dimensions):

        s = (state)
        t = (clock.Current)

        if (clock.IsFirstTimestep):

            s.co2decay1 = (s.lifeco1)
            s.co2decay2 = (math.exp(-1.0 / s.lifeco2))
            s.co2decay3 = (math.exp(-1.0 / s.lifeco3))
            s.co2decay4 = (math.exp(-1.0 / s.lifeco4))
            s.co2decay5 = (math.exp(-1.0 / s.lifeco5))

            s.TerrCO2Stock[t] = (s.TerrCO2Stock0)

            s.cbox1[t] = (283.53)
            s.cbox2[t] = (5.62)
            s.cbox3[t] = (6.29)
            s.cbox4[t] = (2.19)
            s.cbox5[t] = (0.15)
            s.acco2[t] = (s.cbox1[t] + s.cbox2[
                          t] + s.cbox3[t] + s.cbox4[t] + s.cbox5[t])

        else:

            if (t == Timestep.FromYear(2011)):

                s.tempIn2010 = (s.temp[Timestep.FromYear(2010)])

            if (t > Timestep.FromYear(2010)):

                s.TerrestrialCO2[t] = (
                    (s.temp[t - 1] - s.tempIn2010) * s.TerrCO2Sens * s.TerrCO2Stock[t - 1] / s.TerrCO2Stock0)

            else:
                s.TerrestrialCO2[t] = (0)

            s.TerrCO2Stock[t] = (
                max(s.TerrCO2Stock[t - 1] - s.TerrestrialCO2[t], 0.0))

            s.globc[t] = (s.mco2[t] + s.TerrestrialCO2[t])

            s.cbox1[t] = (
                s.cbox1[t - 1] * s.co2decay1 + 0.000471 * s.co2frac1 * (s.globc[t]))
            s.cbox2[t] = (
                s.cbox2[t - 1] * s.co2decay2 + 0.000471 * s.co2frac2 * (s.globc[t]))
            s.cbox3[t] = (
                s.cbox3[t - 1] * s.co2decay3 + 0.000471 * s.co2frac3 * (s.globc[t]))
            s.cbox4[t] = (
                s.cbox4[t - 1] * s.co2decay4 + 0.000471 * s.co2frac4 * (s.globc[t]))
            s.cbox5[t] = (
                s.cbox5[t - 1] * s.co2decay5 + 0.000471 * s.co2frac5 * (s.globc[t]))

            s.acco2[t] = (s.cbox1[t] + s.cbox2[
                          t] + s.cbox3[t] + s.cbox4[t] + s.cbox5[t])


behavior_classes = [ClimateCO2CycleComponent]
