# This file was automatically generated by converter.py on
# 2013-05-31 17:48:52.303743. Think long and hard before
# attempting to modify it.

import math
from components.helpers import *


class IOceanState(Parameters):
    sea = IVariable1Dimensional('sea', [
                                'Timestep'], 'double', 'Sea-level rise in cm')
    temp = IParameter1Dimensional('temp', [
                                  'Timestep'], 'double', 'Temperature incrase in C\xc2\xb0')
    lifesea = ScalarVariable('lifesea', 'double', '')
    seas = ScalarVariable('seas', 'double', '')
    delaysea = ScalarVariable('delaysea', 'double', None)

    options = [sea, temp, lifesea, seas, delaysea]


class OceanComponent(Behaviors):
    state_class = IOceanState

    def run(self, state, clock, dimensions):

        s = (state)
        t = (clock.Current)

        if (clock.IsFirstTimestep):

            s.delaysea = (1.0 / s.lifesea)
            s.sea[t] = (0.0)

        else:

            ds = (s.delaysea * s.seas * s.temp[t] - s.delaysea * s.sea[t - 1])

            s.sea[t] = (s.sea[t - 1] + ds)


behavior_classes = [OceanComponent]
