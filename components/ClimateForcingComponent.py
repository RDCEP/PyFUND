# This file was automatically generated by converter.py on
# 2013-05-31 15:40:26.366402. Think long and hard before
# attempting to modify it.

import math
from components.helpers import *


class IClimateForcingState(Parameters):
    acco2 = IParameter1Dimensional('acco2', [
                                   'Timestep'], 'double', 'Atmospheric CO2 concentration')
    acch4 = IParameter1Dimensional('acch4', [
                                   'Timestep'], 'double', 'Atmospheric CH4 concentration')
    acn2o = IParameter1Dimensional('acn2o', [
                                   'Timestep'], 'double', 'Atmospheric N2O concentration')
    acsf6 = IParameter1Dimensional('acsf6', [
                                   'Timestep'], 'double', 'Atmospheric SF6 concentrations')
    acso2 = IParameter1Dimensional('acso2', [
                                   'Timestep'], 'double', 'Atmospheric SO2 concentration')
    rfCO2 = IVariable1Dimensional('rfCO2', [
                                  'Timestep'], 'double', 'Radiative forcing from CO2')
    rfCH4 = IVariable1Dimensional('rfCH4', [
                                  'Timestep'], 'double', 'Radiative forcing from CH4')
    rfN2O = IVariable1Dimensional('rfN2O', [
                                  'Timestep'], 'double', 'Radiative forcing from N2O')
    rfSF6 = IVariable1Dimensional('rfSF6', [
                                  'Timestep'], 'double', 'Radiative forcing from N2O')
    rfSO2 = IVariable1Dimensional('rfSO2', [
                                  'Timestep'], 'double', 'Radiative forcing from SO2')
    radforc = IVariable1Dimensional('radforc', [
                                    'Timestep'], 'double', 'Radiative forcing')
    rfEMF22 = IVariable1Dimensional('rfEMF22', [
                                    'Timestep'], 'double', 'EMF22 radiative forcing')
    co2pre = ScalarVariable(
        'co2pre', 'double', 'Pre-industrial atmospheric CO2 concentration')
    ch4pre = ScalarVariable(
        'ch4pre', 'double', 'Pre-industrial atmospheric CH4 concentration')
    ch4ind = ScalarVariable(
        'ch4ind', 'double', 'Indirect radiative forcing increase for CH4')
    n2opre = ScalarVariable(
        'n2opre', 'double', 'Pre-industrial atmospheric N2O concentration')
    sf6pre = ScalarVariable(
        'sf6pre', 'double', 'Pre-industrial atmospheric SF6 concentration')
    so2dir = ScalarVariable(
        'so2dir', 'Double', 'Direct radiative forcing by sulphate aerosols')
    so2ind = ScalarVariable(
        'so2ind', 'double', 'Indirect radiative forcing by sulphate aerosols')

    options = [
        acco2, acch4, acn2o, acsf6, acso2, rfCO2, rfCH4, rfN2O, rfSF6, rfSO2,
        radforc, rfEMF22, co2pre, ch4pre, ch4ind, n2opre, sf6pre, so2dir, so2ind]


class ClimateForcingComponent(Behaviors):
    state_class = IClimateForcingState

    def run(self, state, clock):

        s = (state)
        t = (clock.Current)

        if (clock.IsFirstTimestep):

            pass

        else:
            ch4n2o = (Interact(s.ch4pre, s.n2opre))

            s.rfCO2[t] = (5.35 * math.log(s.acco2[t] / s.co2pre))

            s.rfCH4[t] = (0.036 * (1.0 + s.ch4ind) * (math.sqrt(s.acch4[
                          t]) - math.sqrt(s.ch4pre)) - Interact(s.acch4[t], s.n2opre) + ch4n2o)

            s.rfN2O[t] = (0.12 * (math.sqrt(s.acn2o[t]) - math.sqrt(
                s.n2opre)) - Interact(s.ch4pre, s.acn2o[t]) + ch4n2o)

            s.rfSF6[t] = (0.00052 * (s.acsf6[t] - s.sf6pre))

            s.rfSO2[t] = (s.so2dir * s.acso2[t] / 14.6 + s.so2ind * math.log(
                1.0 + s.acso2[t] / 34.4) / math.log(1 + 14.6 / 34.4) - 0.9)

            s.radforc[t] = (s.rfCO2[t] + s.rfCH4[
                            t] + s.rfN2O[t] + s.rfSF6[t] - s.rfSO2[t])

            s.rfEMF22[t] = (s.rfCO2[t] + s.rfCH4[t] + s.rfN2O[t])


behavior_classes = [ClimateForcingComponent]
