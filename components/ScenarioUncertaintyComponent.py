# This file was automatically generated by converter.py.
# Think long and hard before attempting to modify it.

import math
from components.helpers import *
from components._patches import *


class IScenarioUncertaintyState(Parameters):
    pgrowth = IVariable2Dimensional(
        'pgrowth', [
            'Timestep', 'Region'], 'double', None)
    ypcgrowth = IVariable2Dimensional(
        'ypcgrowth', [
            'Timestep', 'Region'], 'double', None)
    aeei = IVariable2Dimensional(
        'aeei', [
            'Timestep', 'Region'], 'double', None)
    acei = IVariable2Dimensional(
        'acei', [
            'Timestep', 'Region'], 'double', None)
    forestemm = IVariable2Dimensional(
        'forestemm', [
            'Timestep', 'Region'], 'double', None)
    scenpgrowth = IParameter2Dimensional(
        'scenpgrowth', [
            'Timestep', 'Region'], 'double', None)
    scenypcgrowth = IParameter2Dimensional(
        'scenypcgrowth', [
            'Timestep', 'Region'], 'double', None)
    scenaeei = IParameter2Dimensional(
        'scenaeei', [
            'Timestep', 'Region'], 'double', None)
    scenacei = IParameter2Dimensional(
        'scenacei', [
            'Timestep', 'Region'], 'double', None)
    scenforestemm = IParameter2Dimensional(
        'scenforestemm', [
            'Timestep', 'Region'], 'double', None)
    ecgradd = IParameter1Dimensional('ecgradd', ['Region'], 'double', None)
    pgadd = IParameter1Dimensional('pgadd', ['Region'], 'double', None)
    aeeiadd = IParameter1Dimensional('aeeiadd', ['Region'], 'double', None)
    aceiadd = IParameter1Dimensional('aceiadd', ['Region'], 'double', None)
    foremadd = IParameter1Dimensional('foremadd', ['Region'], 'double', None)
    timeofuncertaintystart = ScalarVariable(
        'timeofuncertaintystart',
        'Timestep',
        None)

    options = [
        pgrowth,
        ypcgrowth,
        aeei,
        acei,
        forestemm,
        scenpgrowth,
        scenypcgrowth,
        scenaeei,
        scenacei,
        scenforestemm,
        ecgradd,
        pgadd,
        aeeiadd,
        aceiadd,
        foremadd,
        timeofuncertaintystart]


class ScenarioUncertaintyComponent(Behaviors):
    state_class = IScenarioUncertaintyState

    def run(self, state, clock, dimensions):

        s = (state)
        t = (clock.Current)

        yearsFromUncertaintyStart = (t - s.timeofuncertaintystart)

        #print "yearsFromUncertaintyStart ; global ;",yearsFromUncertaintyStart

        # timeofuncertaintystart = 2000
        # ANC edit 6/22/14: C# has no issue with dividing by 0.0 in year 1950 and evaluates to +infinity. It doesn't
        # matter what sdTimeFactor is set to in 1950 (when python throws the error) since 1950 < 2000 which has
        # no impact on ypcgrowth, pgrowth, aeei, acei, or forestemm


        if t != 1950:
            sdTimeFactor = ((yearsFromUncertaintyStart / 50.0) / (1.0 + (yearsFromUncertaintyStart / 50.0)))
        else:
            sdTimeFactor = 0.0

        #print "sdTimeFactor ; global ; ", sdTimeFactor


        for r in dimensions.GetValuesOfRegion():

            #print "acei start ;", r, " ;", s.acei[t,r]
            #print "aeei start ;", r, " ;", s.aeei[t,r]
            #print "pgrowth start ;", r, " ;", s.pgrowth[t,r]
            #print "ypcgrowth start ;", r, " ;", s.ypcgrowth[t, r]
            #print "t>= timeofuncertaintystart ; global ; ", t>= s.timeofuncertaintystart
            #print "ecgradd ; ", r, " ;", s.ecgradd[r]
            #print "pgadd ; ", r, " ;", s.pgadd[r]

            s.ypcgrowth[t, r] = (s.scenypcgrowth[t, r] +
                                 (t >= s.timeofuncertaintystart and s.ecgradd[r] *
                                  sdTimeFactor or 0.0))
            s.pgrowth[t, r] = (s.scenpgrowth[t, r] +
                               (t >= s.timeofuncertaintystart and s.pgadd[r] *
                                sdTimeFactor or 0.0))
            s.aeei[t, r] = (s.scenaeei[t, r] +
                            (t >= s.timeofuncertaintystart and s.aeeiadd[r] *
                             sdTimeFactor or 0.0))
            s.acei[t, r] = (s.scenacei[t, r] +
                            (t >= s.timeofuncertaintystart and s.aceiadd[r] *
                             sdTimeFactor or 0.0))
            s.forestemm[t, r] = (s.scenforestemm[t, r] +
                                 (t >= s.timeofuncertaintystart and s.foremadd[r] *
                                  sdTimeFactor or 0.0))

            #print "acei end ;", r, " ;", s.acei[t,r]
            #print "aeei end ;", r, " ;", s.aeei[t,r]
            #print "pgrowth end ;", r, " ;", s.pgrowth[t,r]
            #print "ypcgrowth end ;", r, " ;", s.ypcgrowth[t, r]


behavior_classes = [ScenarioUncertaintyComponent]
